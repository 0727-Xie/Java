1、存储结构
TODO：HashSet的底层结构是HashMap
  private transient HashMap<E,Object> map;
  public HashSet() {
        map = new HashMap<>();
   }

2、增加元素
  private static final Object PRESENT = new Object();
  //TODO:PRESENT 作为与Map中的虚拟值(即 <k,v>中一直作为v值存在)
  public boolean add(E e) {
        return map.put(e, PRESENT)==null; //TODO:这里调用的是hashMap的put方法
    }

HashMap中代码：
 public V put(K key, V value) {
         if (table == EMPTY_TABLE) {
             inflateTable(threshold);
         }
         //TODO :键值为空单独处理
         if (key == null)
             return putForNullKey(value);

         int hash = hash(key);  //TODO:计算hash值
         int i = indexFor(hash, table.length); //TODO:确定桶下标
         for (Entry<K,V> e = table[i]; e != null; e = e.next) {
             Object k;
             if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
             //TODO: if (e.hash == hash && ((k = e.key) == key || key.equals(k))) 判断键值是否相同
    //TODO:先找到是否已经存在键值为 key的键值对（不允许键值重复了），如果存在的话就更新value（这里就是常量PRESENT）
    //TODO:从而导致了set中的元素唯一（Set的底层是Map,即Set的元素就作为Map中的key，而Map中的key惟一的，所以set中元素是惟一的）
                 V oldValue = e.value;
                 e.value = value;
                 e.recordAccess(this);
                 return oldValue;
             }
         }

         modCount++;
         addEntry(hash, key, value, i);//TODO：插入新键值对
         return null;
     }

 //TODO:插入新的键值对
 void addEntry(int hash, K key, V value, int bucketIndex) {
         if ((size >= threshold) && (null != table[bucketIndex])) {
             resize(2 * table.length);
             hash = (null != key) ? hash(key) : 0;
             bucketIndex = indexFor(hash, table.length);//TODO:获取在table中的下标
         }

         createEntry(hash, key, value, bucketIndex);
     }

 //TODO:使用链表的头插法，也就是新的键值对插在链表的头部，而不是链表的尾部。
 void createEntry(int hash, K key, V value, int bucketIndex) {
         Entry<K,V> e = table[bucketIndex];//TODO:保存原来的头结点
         table[bucketIndex] = new Entry<>(hash, key, value, e);
         //TODO: table[bucketIndex]指向新结点，新结点指向原来的头结点
         size++;
     }
 //TODO:HashMap允许插入建为null的键值对。因为无法调用null的hashCode(),
 //TODO:就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放。
 //TODO:HashMap使用第0个桶存放键为null的键值对。
 private V putForNullKey(V value) {
         for (Entry<K,V> e = table[0]; e != null; e = e.next) {
             if (e.key == null) {
                 V oldValue = e.value;
                 e.value = value;
                 e.recordAccess(this);
                 return oldValue;
             }
         }
         modCount++;
         addEntry(0, null, value, 0);
         //TODO:HashMap使用第0个桶存放键为null的键值对。 hash值指定s为0，桶下标指定为0
         return null;
     }


3、删除元素
public boolean remove(Object o) {
        return map.remove(o)==PRESENT;
    }

HashMap中元素：
public V remove(Object key) {
        Entry<K,V> e = removeEntryForKey(key);//TODO:返回的是 Entry<K,V> (就是键值对)
        return (e == null ? null : e.value);
      }

final Entry<K,V> removeEntryForKey(Object key) {
        if (size == 0) {
            return null;
        }
        int hash = (key == null) ? 0 : hash(key);
        int i = indexFor(hash, table.length); //TODO：（1）获取桶地址
        Entry<K,V> prev = table[i];//TODO:(2)获取该桶的首结点
        Entry<K,V> e = prev;

        while (e != null) { //TODO:(3)在桶中删除该结点
            Entry<K,V> next = e.next;
            Object k;
            if (e.hash == hash &&
                ((k = e.key) == key || (key != null && key.equals(k)))) {
                modCount++;
                size--;
                if (prev == e)
                    table[i] = next;
                else
                    prev.next = next;
                e.recordRemoval(this);
                return e;
            }
            prev = e;
            e = next;
        }

        return e; //TODO:(4)返回之前保存的 结点（就是键值对）
    }

4、保证元素的唯一性
HashMap中
public V put(K key, V value) {
         if (table == EMPTY_TABLE) {
             inflateTable(threshold);
         }
         //TODO :键值为空单独处理
         if (key == null)
             return putForNullKey(value);

         int hash = hash(key);  //TODO:计算hash值
         int i = indexFor(hash, table.length); //TODO:确定桶下标
         for (Entry<K,V> e = table[i]; e != null; e = e.next) {
             Object k;
             if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
     //TODO: if (e.hash == hash && ((k = e.key) == key || key.equals(k))) 判断键值是否相同
    //TODO:先找到是否已经存在键值为 key的键值对（不允许键值重复了），如果存在的话就更新value（这里就是常量PRESENT）
    //TODO:从而导致了set中的元素唯一（Set的底层是Map,即Set的元素就作为Map中的key，而Map中的key惟一的，所以set中元素是惟一的）
                 V oldValue = e.value;
                 e.value = value;
                 e.recordAccess(this);
                 return oldValue;
             }
         }

         modCount++;
         addEntry(hash, key, value, i);//TODO：插入新键值对
         return null;
     }

5、允许为空吗？
set中允许元素为null,因为 HashMap中有方法 putForNullKey专门处理键值为null的情况，
在set中就是元素为null的情况。
private V putForNullKey(V value) {
         for (Entry<K,V> e = table[0]; e != null; e = e.next) {
             if (e.key == null) {
                 V oldValue = e.value;
                 e.value = value;
                 e.recordAccess(this);
                 return oldValue;
             }
         }
         modCount++;
         addEntry(0, null, value, 0);
         //TODO:HashMap使用第0个桶存放键为null的键值对。 hash值指定s为0，桶下标指定为0
         return null;
     }
