泛型是Java中一个非常重要的知识点，在Java集合类框架中泛型被广泛应用。

1、Java中的泛型是什么 ? 使用泛型的好处是什么?
TODO：在集合中存储对象并在使用前进行类型转换是多么的不方便。泛型防止了那种情况的发生。
TODO：它提供了==编译期==的类型安全，确保你只能把正确类型的对象放入集合中，避免了在运行时出现ClassCastException。

2、Java的泛型是如何工作的 ? 什么是类型擦除 ?
TODO：泛型是通过类型擦除来实现的，编译器在==编译时==擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。
例如List<String>在运行时仅用一个List来表示。
这样做的目的，是确保能和Java 5之前的版本开发二进制类库进行兼容。
你无法在运行时访问到类型参数，因为编译器已经把泛型类型转换成了原始类型。
根据你对这个泛型问题的回答情况，你会得到一些后续提问，
比如为什么泛型是由类型擦除来实现的或者给你展示一些会导致编译器出错的错误泛型代码。

3、什么是泛型中的限定通配符和非限定通配符 ?
TODO:限定通配符对类型进行了限制。有两种限定通配符，
一种是<? extends T>它通过确保类型必须是T的子类来设定类型的上界，
另一种是<? super T>它通过确保类型必须是T的父类来设定类型的下界。
泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。
另一方面<?>表示了非限定通配符，因为<?>可以用任意类型来替代。

4、List<? extends T>和List <? super T>之间有什么区别 ?
List<? extends T>可以接受任何继承自T的类型的List，
而List<? super T>可以接受任何T的父类构成的List。
例如List<? extends Number>可以接受List<Integer>或List<Float>。

5、编写一个泛型方法，让它能接受泛型参数并返回泛型类型?
编写泛型方法并不困难，你需要用泛型类型来替代原始类型，
TODO：比如使用T, E or K,V等被广泛认可的类型占位符。
最简单的情况下，一个泛型方法可能会像这样:
      public V put(K key, V value) {
              return cache.put(key, value);
      }

6、Java中如何使用泛型编写带有参数的类?
关键仍然是使用泛型类型来代替原始类型，而且要使用JDK中采用的标准占位符。
见 genericClass包。

7、一段泛型程序来实现LRU缓存?
见 LRUCache

8、可以把List<String>传递给一个接受List<Object>参数的方法吗？
对任何一个不太熟悉泛型的人来说，这个Java泛型题目看起来令人疑惑，
因为乍看起来String是一种Object，所以List<String>应当可以用在需要List<Object>的地方，但是事实并非如此。
真这样做的话会导致编译错误。
如果你再深一步考虑，你会发现Java这样做是有意义的，
因为List<Object>可以存储任何类型的对象包括String, Integer等等，而List<String>却只能用来存储String。　

List<Object> objectList;
List<String> stringList;
objectList = stringList;  //compilation error incompatible types

9、Array中可以用泛型吗?
这可能是Java泛型面试题中最简单的一个了，当然前提是你要知道Array事实上并不支持泛型，
这也是为什么Joshua Bloch在Effective Java一书中建议使用List来代替Array，
TODO:因为List可以提供编译期的类型安全保证，而Array却不能。