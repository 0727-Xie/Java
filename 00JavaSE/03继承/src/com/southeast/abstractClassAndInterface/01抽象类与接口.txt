接口是抽象类的延伸，在 Java 8 之前，
它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。

从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。
在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。

接口的成员（变量 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。
接口的成员变量默认都是 static 和 final 的。

1、抽象类
（1）抽象类特点
i.抽象类和抽象方法必须用abstract修饰
ii.抽象类不一定有抽象方法，有抽象方法的类一定是抽象类
iii.抽象类不能实例化
iv.抽象类的子类
 要么是抽象类
 要么是重写抽象类中的所有抽象方法

（2）抽象类成员特点
i.成员变量
可以是常量也可以是变量
ii.构造方法
有构造方法，但是不能实例化（用来子类访问父类数据的初始化）
iii.成员方法
可以有抽象方法（限定子类必须完成某些动作）
也可以有非抽象方法（提高代码复用性）

2、接口
（1）接口特点
i.接口用关键字interfacer表示
ii.类实现接口用implements表示
iii.接口不能实例化
iv.接口的子类
 要么是抽象类
 要么重写接口中的所有抽象方法

（2）接口成员特点
i.成员变量
只能是常量， 默认修饰符是 public static final
ii.构造方法
没有，因为接口主要是扩展功能，而没有具体存在
iii.成员方法
只能是抽象方法，默认修饰符是public abstract

3、抽象类和接口的区别：
（1）成员区别
抽象类 变量，常量；有抽象方法，非抽象方法
接口 常量；抽象方法

（2）关系区别
类与类 继承，单继承
类与接口 实现，单实现，多实现
接口与接口 继承，单继承，多继承

（3）设计理念区别
抽象类 被继承体现的是：is a 的关系（共性功能）
接口 被实现体现的是;like a的关系

4、使用选择
使用接口：
i.需要让不想关的类都都实现一个方法，例如不想关的类都可以实现Comparerable接口中compareTo()方法
ii.需要使用多重继承

使用抽象类：
i.需要几个相关的类中共享代码
ii.需要能控制继承来的成员的访问权限，而不是都为public.
iii.需要继承非静态和非常量成员变量
在很多情况下，接口优先于抽象类。
因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。
并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。