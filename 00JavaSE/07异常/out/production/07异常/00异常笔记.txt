Throwable可以用来表示任何可以作为异常抛出的类，
分为两种 Error和Exception。
其中Error用来表示JVM无法处理的错误，Exception分为两种：
（1）受检异常：需要用 try ... catch...语句捕获并进行处理，并且可以从异常中恢复；
（2）非受检异常：是程序运行时异常，例如 除0会引发Arithmetic Exception，此时程序崩溃并且无法恢复。

1、异常的概念
Java异常是一个描述在代码段中发生异常的对象，当发生异常情况时，
一个代表该异常的对象被创建并且在导致该异常的方法中被抛出，
而该方法可以选择自己处理异常或者传递该异常。

2、异常继承体系
见 java异常继承体系.png

Error和Exception的区别：
Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；
Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。

Exception分为两种：
检查异常：在正确的程序运行过程中，很容易出现的、情理可容的异常状况，
          在一定程度上这种异常的发生是可以预测的，并且一旦发生该种异常，就必须采取某种方式进行处理。
            （提示：除了RuntimeException及其子类以外，其他的Exception类及其子类都属于这种异常，
            当程序中可能出现这类异常，要么使用try-catch语句进行捕获，要么用throws子句抛出，否则编译无法通过。)

不受检查异常：包括RuntimeException及其子类和Error。
            ( 提示:不受检查异常为编译器不要求强制处理的异常，检查异常则是编译器要求必须处置的异常。)

3、Java的异常处理机制（本质上是抛出异常和捕获异常）
（1）抛出异常
    i.异常情形:是指阻止当前方法或作用域继续执行的问题
    ii.异常情形和普通问题
    普通问题指在当前环境下能得到足够的信息，总能处理这个错误。
    对于异常情形，已经无法继续下去了，因为在当前环境下无法获得必要的信息来解决问题，
    你所能做的就是从当前环境中跳出，并把问题提交给上一级环境，这就是抛出异常时所发生的事情。
    iii.抛出异常后，会有几件事随之发生：
    第一：像创建普通的java对象一样将使用new在堆上创建一个异常对象
    第二：当前的执行路径（已经无法继续下去了）被终止，并且从当前环境中弹出对异常对象的引用。
    此时，异常处理机制接管程序，并开始寻找一个恰当的地方继续执行程序，这个恰当的地方就是异常处理程序或者异常处理器，
    它的任务是将程序从错误状态中恢复，以使程序要么换一种方式运行，要么继续运行下去。

（2）捕捉异常
    在方法抛出异常之后，运行时系统将转为寻找合适的异常处理器（exception handler）。
    潜在的异常处理器是异常发生时依次存留在调用栈中的方法的集合。
    当异常处理器所能处理的异常类型与方法抛出的异常类型相符时，即为合适的异常处理器。
    运行时系统从发生异常的方法开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。
    当运行时系统遍历调用栈而未找到合适的异常处理器，则运行时系统终止。同时，意味着Java程序的终止。

注意：
对于运行时异常、错误和检查异常，Java技术所要求的异常处理方式有所不同。
（1）由于运行时异常及其子类的不可查性，为了更合理、更容易地实现应用程序，
Java规定，运行时异常将由Java运行时系统自动抛出，允许应用程序忽略运行时异常。

（2）对于方法运行中可能出现的Error，当运行方法不欲捕捉时，
Java允许该方法不做任何抛出声明。因为，大多数Error异常属于永远不能被允许发生的状况，也属于合理的应用程序不该捕捉的异常。

（3）对于所有的检查异常，
Java规定：一个方法必须捕捉，或者声明抛出方法之外。也就是说，当一个方法选择不捕捉检查异常时，它必须声明将抛出异常。

4、Throwable类中的常用方法
注意：catch关键字后面括号中的Exception类型的参数e。
    Exception就是try代码块传递给catch代码块的变量类型，e就是变量名。
    catch代码块中语句"e.getMessage();"用于输出错误性质。通常异常处理常用3个函数来获取异常的有关信息:
        getCause()：返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。
  　    getMeage()：返回异常的消息信息。
  　    printStackTrace()：对象的堆栈跟踪输出至错误输出流，作为字段 System.err 的值。
    有时为了简单会忽略掉catch语句后的代码，这样try-catch语句就成了一种摆设，
    一旦程序在运行过程中出现了异常，就会忽略处理异常，而错误发生的原因很难查找。

5、java常见异常
（1） runtimeException子类:
        i.java.lang.ArrayIndexOutOfBoundsException
            数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。
        ii.java.lang.ArithmeticException
            算术条件异常。譬如：整数除零等。
        iii.java.lang.NullPointerException
            空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等
        iv.java.lang.ClassNotFoundException
            找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。
        v.java.lang.NegativeArraySizeException
            数组长度为负异常
        vi.java.lang.ArrayStoreException
            TODO:数组中包含不兼容的值抛出的异常
        vii.java.lang.SecurityException
            TODO:安全性异常
        viii.java.lang.IllegalArgumentException
            非法参数异常

（2）IOException
        i.IOException：
        操作输入流和输出流时可能出现的异常。
        ii.EOFException
        文件已结束异常
        iii.FileNotFoundException
        文件未找到异常

（3）其他
        ClassCastException    类型转换异常类
        ArrayStoreException  数组中包含不兼容的值抛出的异常
        SQLException   操作数据库异常类
        NoSuchFieldException   字段未找到异常
        NoSuchMethodException   方法未找到抛出的异常
        NumberFormatException    字符串转换为数字抛出的异常
        StringIndexOutOfBoundsException 字符串索引超出范围抛出的异常
        IllegalAccessException  不允许访问某类异常
        InstantiationException
        当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常